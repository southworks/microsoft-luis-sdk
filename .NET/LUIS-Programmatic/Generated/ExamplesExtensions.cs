// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Language.LUIS
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Examples.
    /// </summary>
    public static partial class ExamplesExtensions
    {
            /// <summary>
            /// Adds a labeled example to the application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='azureRegion'>
            /// Supported Azure regions for Cognitive Services endpoints. Possible values
            /// include: 'westus', 'westeurope'
            /// </param>
            /// <param name='appId'>
            /// Format - guid. The application ID.
            /// </param>
            /// <param name='versionId'>
            /// The version ID of the task.
            /// </param>
            /// <param name='exampleLabelObject'>
            /// A JSON object containing the example label.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LabelExampleResponse> AddLabelAsync(this IExamples operations, AzureRegions azureRegion, string appId, string versionId, ExampleLabelObject exampleLabelObject = default(ExampleLabelObject), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddLabelWithHttpMessagesAsync(azureRegion, appId, versionId, exampleLabelObject, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a batch of labeled examples to the specified application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='azureRegion'>
            /// Supported Azure regions for Cognitive Services endpoints. Possible values
            /// include: 'westus', 'westeurope'
            /// </param>
            /// <param name='appId'>
            /// Format - guid. The application ID.
            /// </param>
            /// <param name='versionId'>
            /// The version ID of the task.
            /// </param>
            /// <param name='exampleLabelObjectArray'>
            /// A JSON array containing example labels.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BatchLabelExample>> BatchAddLabelsAsync(this IExamples operations, AzureRegions azureRegion, string appId, string versionId, IList<ExampleLabelObject> exampleLabelObjectArray = default(IList<ExampleLabelObject>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchAddLabelsWithHttpMessagesAsync(azureRegion, appId, versionId, exampleLabelObjectArray, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns examples to be reviewed.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='azureRegion'>
            /// Supported Azure regions for Cognitive Services endpoints. Possible values
            /// include: 'westus', 'westeurope'
            /// </param>
            /// <param name='appId'>
            /// Format - guid. The application ID.
            /// </param>
            /// <param name='versionId'>
            /// The version ID of the task.
            /// </param>
            /// <param name='skip'>
            /// The number of entries to skip. Default value is 0.
            /// </param>
            /// <param name='take'>
            /// The number of entries to return. Maximum page size is 500. Default is 100.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LabeledUtterance>> ReviewLabeledExamplesAsync(this IExamples operations, AzureRegions azureRegion, string appId, string versionId, int skip = 0, int take = 100, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReviewLabeledExamplesWithHttpMessagesAsync(azureRegion, appId, versionId, skip, take, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the label with the specified ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='azureRegion'>
            /// Supported Azure regions for Cognitive Services endpoints. Possible values
            /// include: 'westus', 'westeurope'
            /// </param>
            /// <param name='appId'>
            /// Format - guid. The application ID.
            /// </param>
            /// <param name='versionId'>
            /// The version ID of the task.
            /// </param>
            /// <param name='exampleId'>
            /// The example ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteExampleLabelsAsync(this IExamples operations, AzureRegions azureRegion, string appId, string versionId, int exampleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteExampleLabelsWithHttpMessagesAsync(azureRegion, appId, versionId, exampleId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
